# [PackageDev] target_format: plist, source_format: yaml, ext: tmLanguage
# [PackageDev] target_format: json, source_format: yaml, ext: JSON-tmLanguage
---
name: Swift
scopeName: source.swift
fileTypes: [swift]
uuid: 7efa1168-97c3-4433-8dd7-15b99bf3bb53
keyEquivalent: ^~S

patterns:
- include: '#comments'
- include: '#literals'
- include: '#storage-type'
- include: '#loop-control'
- include: '#conditional-statement'
- include: '#control-transfer-statement'
- include: '#operators'
- include: '#operator-keywords'
- include: '#special-keyword'
- include: '#class-function'
- include: '#primitive-type'
- include: '#collection-type'
- include: '#optional-type'
- include: '#boolean'
- include: '#number'
- include: '#import'
- include: '#special-literal'

repository:

# Conditional Statements
  conditional-statement:
    name: keyword.control.conditional.swift
    patterns:
    - include: '#if-else-statement'
    - include: '#switch-statement'
  switch-statement:
    name: keyword.control.conditional.swift
    match: \b(switch|case|default|where)\b
  if-else-statement:
    name: keyword.control.conditional.swift
    match: \b(if|else)\b

# Control Transfer Statements
  control-transfer-statement:
    name: keyword.control.transfer.swift
    match: \b(continue|break|fallthrough|return)\b

# Loops
  loop-control:
    name: keyword.control.loop.swift
    match: \b(while|do|for|in)\b

# Storage types
  storage-type:
    name: storage.type.swift
    match: \b(var|func|let|class|enum|struct|protocol|extension|typealias)\b

# Special keywords
  special-keyword:
    name: constant.language.swift
    match: \b(self|super)\b

# Operators
  operators:
    patterns:
    - include: '#comparative-operator'
    - include: '#assignment-operator'
    - include: '#logical-operator'
    - include: '#remainder-operator'
    - include: '#increment-decrement-operator'
    - include: '#overflow-operator'
    - include: '#range-operator'
    - include: '#bitwise-operator'
    - include: '#arithmetic-operator'
    - include: '#ternary-operator'
    - include: '#custom-operator'
  comparative-operator:
    name: keyword.operator.comparative.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)((=|!)==?|(<|>)=?|~=)(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  assignment-operator:
    name: keyword.operator.assignment.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)(\+|\-|\*|\/|%|<<|>>|&|\^|\||&&|\|\|)?=(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  logical-operator:
    name: keyword.operator.logical.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)(!|&&|\|\|)(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  remainder-operator:
    name: keyword.operator.remainder.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)\%(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  increment-decrement-operator:
    name: keyword.operator.increment-or-decrement.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)(\+\+|\-\-)(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  overflow-operator:
    name: keyword.operator.overflow.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)\&(\+|\-|\*|\/|%)(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  range-operator:
    name: keyword.operator.range.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)\.\.(?:\.)?(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  arithmetic-operator:
    name: keyword.operator.arithmetic.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)(\+|\-|\*|\/)(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  bitwise-operator:
    name: keyword.operator.bitwise.swift
    match: (?<!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)(&|\||\^|<<|>>)(?!\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)
  type-casting-operator:
    name: keyword.operator.cast.swift
    match: \b(is|as)\b
  ternary-operator:
    name: keyword.operator.ternary.swift
    match: (?<=[\s(\[{,;:])(\?|:)(?=[\s)\]},;:])
  custom-operator:
    patterns:
    - name: keyword.operator.custom.prefix.unary.swift
      match: (?<=[\s(\[{,;:])(\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)++(?![\s)\]},;:])
    - name: keyword.operator.custom.postfix.unary.swift
      match: (?<![\s(\[{,;:])(\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)++(?![\s)\]},;:\.])
    - name: keyword.operator.custom.binary.swift
      match: (?<=[\s(\[{,;:])(\/|=|\-|\+|!|\*|%|<|>|&|\||\^|~|\.)++(?=[\s)\]},;:])

# Operator Keywords
  operator-keywords:
    name: storage.type.swift
    match: \b(operator|prefix|infix|postfix)\b

# Literal Expressions
  literals:
    patterns:
    - include: '#string-literal'
    - include: '#special-literal'
  string-literal:
    name: string.quoted.double.swift
    begin: \"
    end: \"
    patterns:
    - name: constant.character.escape.swift
      match: \\([0tnr\"\'\\]|x\h{2}|u\h{4}|U\h{8})
    - contentName: meta.expression.swift
      begin: \\\(
      end: \)
      beginCaptures:
        '0': { name: punctuation.expression.begin.swift }
      endCaptures:
        '0': { name: punctuation.expression.end.swift }
      patterns:
      - include: $self
    - match: (\"|\\)
      name: invalid.illegal.swift
  special-literal:
    name: keyword.other.literal.swift
    match: \b__(FILE|LINE|COLUMN|FUNCTION)__\b

# Primitive values
  boolean:
    name: keyword.constant.boolean.swift
    match: \b(true|false)\b

  number:
    name: constant.numeric.swift
    match: (?:[\-+])?\d+(?:\.\d+)?\b

# Property functions
  class-function:
    name: keyword.swift
    match: \b(init|get|set|willSet|didSet|override)


# Type names
  primitive-type:
    comment: Primitive types
    name: support.type.swift
    match: \b(Int|Float|Double|String|Bool|Character)\b
  collection-type:
    comment: Collection types
    patterns:
    - include: '#array-type'
    - include: '#dictionary-type'
    - name: support.type.swift
      match: \b(Array|Dictionary)\b
  array-type:
    name: meta.array.swift
    begin: \b(Array)(<)
    end: (>)
    beginCaptures:
      '1': { name: support.type.array.swift }
      '2': { name: punctuation.array.begin.swift }
    endCaptures:
      '1': {name: punctuation.array.end.swift}
    patterns:
      - include: $self
  dictionary-type:
    name: meta.dictionary.swift
    begin: \b(Dictionary)(<)
    end: (>)
    beginCaptures:
      '1': { name: support.type.dictionary.swift }
      '2': { name: punctuation.dictionary.begin.swift }
    endCaptures:
      '1': {name: punctuation.dictionary.end.swift}
    patterns:
      - include: $self
  optional-type:
    name: meta.optional.swift
    match: \b(Optional)(<)
    end: (>)
    beginCaptures:
      '1': { name: support.type.optional.swift }
      '2': { name: punctuation.optional.begin.swift }
    endCaptures:
      '1': { name: punctuation.optional.end.swift }
    patterns:
      - include: $self


# Comments
  comments:
    comment: All comment types
    patterns:
    - include: '#documentation-comment'
    - include: '#block-comment'
    - include: '#in-line-comment'
  documentation-comment:
    comment: Documentation comments
    name: comment.block.documentation.swift
    begin: /\*\*
    end: \*/
    beginCaptures:
      '0': { name: punctuation.definition.comment.block.documentation.begin.swift }
    endCaptures:
      '0': { name: punctuation.definition.comment.block.documentation.end.swift }
  block-comment:
    comment: Block level comments
    name: comment.block.swift
    begin: /\*
    end: \*/
    beginCaptures:
      '0': { name: punctuation.definition.comment.block.begin.swift }
    endCaptures:
      '0': { name: punctuation.definition.comment.block.end.swift }
  in-line-comment:
    comment: In-line comments
    name: comment.line.double-slash.swift
    match: (//).*
    captures:
      '1': { name: punctuation.definition.comment.line.double-slash.swift }


# import
  import:
    comment: Import statement
    name: meta.import.swift
    match: \b(import)\s+(\w+)
    captures:
      '1': { name: keyword.other.import.swift }
      '2': { name: support.type.module.import.swift }

...