{
    "fileTypes": [
        "swift"
    ], 
    "keyEquivalent": "^~S", 
    "uuid": "7efa1168-97c3-4433-8dd7-15b99bf3bb53", 
    "patterns": [
        {
            "include": "#comments"
        }, 
        {
            "include": "#strings"
        }, 
        {
            "include": "#storage-type"
        }, 
        {
            "include": "#loop-control"
        }, 
        {
            "include": "#conditional-statement"
        }, 
        {
            "include": "#control-transfer-statement"
        }, 
        {
            "include": "#operators"
        }, 
        {
            "include": "#operator-keywords"
        }, 
        {
            "include": "#special-keyword"
        }, 
        {
            "include": "#class-function"
        }, 
        {
            "include": "#primitive-type"
        }, 
        {
            "include": "#collection-type"
        }, 
        {
            "include": "#boolean"
        }, 
        {
            "include": "#number"
        }, 
        {
            "include": "#import"
        }, 
        {
            "include": "#special-literal"
        }
    ], 
    "scopeName": "source.swift", 
    "repository": {
        "double-quoted-string": {
            "comment": "Double-quoted string", 
            "patterns": [
                {
                    "match": "\\\\.", 
                    "name": "constant.character.escape.swift"
                }, 
                {
                    "match": ".*?"
                }
            ], 
            "end": "\\\"", 
            "begin": "\\\"", 
            "name": "string.quoted.double.swift"
        }, 
        "arithmetic-operator": {
            "match": "(\\+|\\-|\\*|\\/)", 
            "name": "keyword.operator.arithmetic.swift"
        }, 
        "overflow-operator": {
            "match": "\\&(\\+|\\-|\\*|\\/|%)", 
            "name": "keyword.operator.overflow.swift"
        }, 
        "control-transfer-statement": {
            "match": "\\b(continue|break|fallthrough|return)\\b", 
            "name": "keyword.control.transfer.swift"
        }, 
        "operator-keywords": {
            "match": "\\b(operator|prefix|infix|postfix)\\b", 
            "name": "storage.type.swift"
        }, 
        "bitwise-operator": {
            "match": "(&|\\||\\^|<<|>>)", 
            "name": "keyword.operator.bitwise.swift"
        }, 
        "conditional-statement": {
            "patterns": [
                {
                    "include": "#if-else-statement"
                }, 
                {
                    "include": "#switch-statement"
                }
            ], 
            "name": "keyword.control.conditional.swift"
        }, 
        "collection-type": {
            "comment": "Collection types", 
            "match": "\\b(Array|Dictionary)\\b", 
            "name": "storage.type.swift"
        }, 
        "boolean": {
            "match": "\\b(true|false)\\b", 
            "name": "keyword.constant.boolean.swift"
        }, 
        "single-quoted-string": {
            "comment": "Single-quoted string", 
            "patterns": [
                {
                    "match": "\\\\.", 
                    "name": "constant.character.escape.swift"
                }, 
                {
                    "match": ".*?"
                }
            ], 
            "end": "\\'", 
            "begin": "\\'", 
            "name": "string.quoted.single.swift"
        }, 
        "range-operator": {
            "match": "\\.\\.(?:\\.)?", 
            "name": "keyword.operator.range.swift"
        }, 
        "special-literal": {
            "match": "\\b__(FILE|LINE|COLUMN|FUNCTION)__\\b", 
            "name": "keyword.other.literal.swift"
        }, 
        "storage-type": {
            "match": "\\b(var|func|let|class|enum|struct|protocol|extension|typealias)\\b", 
            "name": "storage.type.swift"
        }, 
        "assignment-operator": {
            "match": "(\\+|\\-|\\*|\\/|%|<<|>>|&|\\^|\\||&&|\\|\\|)?=", 
            "name": "keyword.operator.assignment.swift"
        }, 
        "special-keyword": {
            "match": "\\b(self|super)\\b", 
            "name": "constant.language.swift"
        }, 
        "import": {
            "captures": {
                "1": {
                    "name": "keyword.other.import.swift"
                }, 
                "2": {
                    "name": "support.type.module.import.swift"
                }
            }, 
            "comment": "Import statement", 
            "match": "\\b(import)\\s+(\\w+)", 
            "name": "meta.import.swift"
        }, 
        "if-else-statement": {
            "match": "\\b(if|else)\\b", 
            "name": "keyword.control.conditional.swift"
        }, 
        "increment-decrement-operator": {
            "match": "(\\+\\+|\\-\\-)", 
            "name": "keyword.operator.increment-or-decrement.swift"
        }, 
        "switch-statement": {
            "match": "\\b(switch|case|default|where)\\b", 
            "name": "keyword.control.conditional.swift"
        }, 
        "block-comment": {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.begin.swift"
                }
            }, 
            "comment": "Block level comments", 
            "end": "\\*/", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.end.swift"
                }
            }, 
            "begin": "/\\*", 
            "name": "comment.block.swift"
        }, 
        "strings": {
            "patterns": [
                {
                    "include": "#single-quoted-string"
                }, 
                {
                    "include": "#double-quoted-string"
                }
            ], 
            "comment": "Quoted strings", 
            "name": "string.quoted.swift"
        }, 
        "loop-control": {
            "match": "\\b(while|do|for|in)\\b", 
            "name": "keyword.control.loop.swift"
        }, 
        "primitive-type": {
            "comment": "Primitive types", 
            "match": "\\b(Int|Float|Double|String|Bool|Character)\\b", 
            "name": "storage.type.swift"
        }, 
        "operators": {
            "patterns": [
                {
                    "include": "#comparative-operator"
                }, 
                {
                    "include": "#assignment-operator"
                }, 
                {
                    "include": "#logical-operator"
                }, 
                {
                    "include": "#remainder-operator"
                }, 
                {
                    "include": "#increment-decrement-operator"
                }, 
                {
                    "include": "#overflow-operator"
                }, 
                {
                    "include": "#range-operator"
                }, 
                {
                    "include": "#bitwise-operator"
                }, 
                {
                    "include": "#arithmetic-operator"
                }
            ]
        }, 
        "number": {
            "match": "(?:[\\-+])?\\d+(?:\\.\\d+)?\\b", 
            "name": "constant.numeric.swift"
        }, 
        "type-casting-operator": {
            "match": "\\b(is|as)\\b", 
            "name": "keyword.operator.cast.swift"
        }, 
        "class-function": {
            "match": "\\b(init|get|set|willSet|didSet|override)", 
            "name": "keyword.swift"
        }, 
        "documentation-comment": {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.documentation.begin.swift"
                }
            }, 
            "comment": "Documentation comments", 
            "end": "\\*/", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.documentation.end.swift"
                }
            }, 
            "begin": "/\\*\\*", 
            "name": "comment.block.documentation.swift"
        }, 
        "comparative-operator": {
            "match": "((=|!)==?|(<|>)=?|~=)", 
            "name": "keyword.operator.comparative.swift"
        }, 
        "logical-operator": {
            "match": "(!|&&|\\|\\|)", 
            "name": "keyword.operator.logical.swift"
        }, 
        "in-line-comment": {
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.line.double-slash.swift"
                }
            }, 
            "comment": "In-line comments", 
            "match": "(//).*", 
            "name": "comment.line.double-slash.swift"
        }, 
        "comments": {
            "patterns": [
                {
                    "include": "#documentation-comment"
                }, 
                {
                    "include": "#block-comment"
                }, 
                {
                    "include": "#in-line-comment"
                }
            ], 
            "comment": "All comment types"
        }, 
        "remainder-operator": {
            "match": "\\%", 
            "name": "keyword.operator.remainder.swift"
        }
    }, 
    "name": "Swift"
}