{
    "repository": {
        "assignment-operator": {
            "name": "keyword.operator.assignment.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)(\\+|\\-|\\*|\\/|%|<<|>>|&|\\^|\\||&&|\\|\\|)?=(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "storage-type": {
            "name": "storage.type.swift", 
            "match": "\\b(var|func|let|class|enum|struct|protocol|extension|typealias)\\b"
        }, 
        "floating-point-literal": {
            "name": "constant.numeric.floating-point.swift", 
            "patterns": [
                {
                    "comment": "floating-point-literal -> (decimal-literal)(decimal-fraction)?(decimal-exponent)?", 
                    "match": "\\b(\\d[\\d_]*)(\\.(\\d[\\d_]*))?([eE][+\\-]?(\\d[\\d_]*))?\\b"
                }, 
                {
                    "comment": "floating-point-literal -> (hexadecimal-literal)(hexadecimal-fraction)?(hexadecimal-exponent)", 
                    "match": "\\b(0x\\h[\\h_]*)(\\.(0x\\h[\\h_]*))?([pP][+\\-]?(0x\\h[\\h_]*))\\b"
                }
            ]
        }, 
        "array-type": {
            "end": "(>)", 
            "begin": "\\b(Array)(<)", 
            "beginCaptures": {
                "1": {
                    "name": "support.type.array.swift"
                }, 
                "2": {
                    "name": "punctuation.array.begin.swift"
                }
            }, 
            "name": "meta.array.swift", 
            "endCaptures": {
                "1": {
                    "name": "punctuation.array.end.swift"
                }
            }, 
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        }, 
        "bitwise-operator": {
            "name": "keyword.operator.bitwise.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)(&|\\||\\^|<<|>>)(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "custom-operator": {
            "patterns": [
                {
                    "name": "keyword.operator.custom.prefix.unary.swift", 
                    "match": "(?<=[\\s(\\[{,;:])(\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)++(?![\\s)\\]},;:])"
                }, 
                {
                    "name": "keyword.operator.custom.postfix.unary.swift", 
                    "match": "(?<![\\s(\\[{,;:])(\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)++(?![\\s)\\]},;:\\.])"
                }, 
                {
                    "name": "keyword.operator.custom.binary.swift", 
                    "match": "(?<=[\\s(\\[{,;:])(\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)++(?=[\\s)\\]},;:])"
                }
            ]
        }, 
        "protocol-composition-type": {
            "end": "(>)", 
            "beginCaptures": {
                "1": {
                    "name": "support.type.protocol.swift"
                }, 
                "2": {
                    "name": "punctuation.protocol.begin.swift"
                }
            }, 
            "name": "meta.protocol.swift", 
            "match": "\\b(protocol)(<)", 
            "endCaptures": {
                "1": {
                    "name": "punctuation.protocol.end.swift"
                }
            }, 
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        }, 
        "overflow-operator": {
            "name": "keyword.operator.overflow.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)\\&(\\+|\\-|\\*|\\/|%)(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "string-literal": {
            "end": "\\\"", 
            "begin": "\\\"", 
            "beginCaptures": {
                "0": {
                    "name": "string.quoted.double.swift"
                }
            }, 
            "name": "meta.literal.string.swift", 
            "endCaptures": {
                "0": {
                    "name": "string.quoted.double.swift"
                }
            }, 
            "patterns": [
                {
                    "name": "constant.character.escape.swift", 
                    "match": "\\\\([0tnr\\\"\\'\\\\]|x\\h{2}|u\\h{4}|U\\h{8})"
                }, 
                {
                    "end": "(\\))", 
                    "begin": "\\\\(\\()", 
                    "beginCaptures": {
                        "0": {
                            "name": "support.punctuation.expression.begin.swift"
                        }
                    }, 
                    "name": "meta.expression.swift", 
                    "endCaptures": {
                        "1": {
                            "name": "support.punctuation.expression.end.swift"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }, 
                {
                    "name": "invalid.illegal.swift", 
                    "match": "(\\\"|\\\\)"
                }, 
                {
                    "name": "string.quoted.double.swift", 
                    "match": "(.)"
                }
            ]
        }, 
        "ternary-operator": {
            "name": "keyword.operator.ternary.swift", 
            "match": "(?<=[\\s(\\[{,;:])(\\?|:)(?=[\\s)\\]},;:])"
        }, 
        "operator-declaration-keyword": {
            "comment": "operator-declaration", 
            "name": "keyword.other.operator.swift", 
            "match": "\\b(operator|prefix|infix|postfix)\\b"
        }, 
        "arithmetic-operator": {
            "name": "keyword.operator.arithmetic.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)(\\+|\\-|\\*|\\/)(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "boolean": {
            "name": "keyword.constant.boolean.swift", 
            "match": "\\b(true|false)\\b"
        }, 
        "literal": {
            "patterns": [
                {
                    "include": "#integer-literal"
                }, 
                {
                    "include": "#floating-point-literal"
                }, 
                {
                    "include": "#string-literal"
                }, 
                {
                    "include": "#special-literal"
                }
            ]
        }, 
        "operator": {
            "patterns": [
                {
                    "include": "#comparative-operator"
                }, 
                {
                    "include": "#assignment-operator"
                }, 
                {
                    "include": "#logical-operator"
                }, 
                {
                    "include": "#remainder-operator"
                }, 
                {
                    "include": "#increment-decrement-operator"
                }, 
                {
                    "include": "#overflow-operator"
                }, 
                {
                    "include": "#range-operator"
                }, 
                {
                    "include": "#bitwise-operator"
                }, 
                {
                    "include": "#arithmetic-operator"
                }, 
                {
                    "include": "#ternary-operator"
                }, 
                {
                    "include": "#type-casting-operator"
                }, 
                {
                    "include": "#custom-operator"
                }
            ]
        }, 
        "branch-statement-keyword": {
            "name": "keyword.control.branch.swift", 
            "patterns": [
                {
                    "include": "#if-statement-keyword"
                }, 
                {
                    "include": "#switch-statement-keyword"
                }
            ]
        }, 
        "collection-type": {
            "comment": "Collection types", 
            "patterns": [
                {
                    "include": "#array-type"
                }, 
                {
                    "include": "#dictionary-type"
                }, 
                {
                    "name": "support.type.swift", 
                    "match": "\\b(Array|Dictionary)\\b"
                }
            ]
        }, 
        "loop-statement-keyword": {
            "comment": "loop-statement", 
            "name": "keyword.control.loop.swift", 
            "match": "\\b(while|do|for|in)\\b"
        }, 
        "integer-literal": {
            "name": "constant.numeric.integer.swift", 
            "patterns": [
                {
                    "comment": "binary-literal", 
                    "name": "constant.numeric.integer.binary.swift", 
                    "match": "(\\B\\-|\\b)(0b[01][01_]*)\\b"
                }, 
                {
                    "comment": "octal-literal", 
                    "name": "constant.numeric.integer.octal.swift", 
                    "match": "(\\B\\-|\\b)(0o[0-7][0-7_]*)\\b"
                }, 
                {
                    "comment": "decimal-literal", 
                    "name": "constant.numeric.integer.decimal.swift", 
                    "match": "(\\B\\-|\\b)(\\d[\\d_]*)\\b"
                }, 
                {
                    "comment": "hexadecimal-literal", 
                    "name": "constant.numeric.integer.hexadecimal.swift", 
                    "match": "(\\B\\-|\\b)(0x\\h[\\h_]*)\\b"
                }
            ]
        }, 
        "switch-statement-keyword": {
            "comment": "switch-statement", 
            "name": "keyword.control.switch.swift", 
            "match": "\\b(switch|case|default|where)\\b"
        }, 
        "increment-decrement-operator": {
            "name": "keyword.operator.increment-or-decrement.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)(\\+\\+|\\-\\-)(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "control-transfer-statement-keyword": {
            "comment": "control-transfer-statement", 
            "name": "keyword.control.transfer.swift", 
            "match": "\\b(continue|break|fallthrough|return)\\b"
        }, 
        "declaration-specifier": {
            "comment": "declaration-specifier", 
            "name": "keyword.other.declaration-specifier.swift", 
            "match": "\\b(class|mutating|nonmutating|override|static|unowned((un)?safe)?|weak)\\b"
        }, 
        "primitive-type": {
            "comment": "Primitive types", 
            "name": "support.type.swift", 
            "match": "\\b(Int|Float|Double|String|Bool|Character)\\b"
        }, 
        "documentation-comment": {
            "comment": "Documentation comment", 
            "begin": "/\\*\\*", 
            "end": "\\*/", 
            "name": "comment.block.documentation.swift", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.documentation.end.swift"
                }
            }, 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.documentation.begin.swift"
                }
            }
        }, 
        "keyword": {
            "patterns": [
                {
                    "include": "#branch-statement-keyword"
                }, 
                {
                    "include": "#control-transfer-statement-keyword"
                }, 
                {
                    "include": "#loop-statement-keyword"
                }, 
                {
                    "include": "#declaration-specifier"
                }, 
                {
                    "include": "#operator-declaration-keyword"
                }, 
                {
                    "comment": "declaration keyword", 
                    "name": "keyword.declaration.swift", 
                    "match": "\\b(class|deinit|enum|extension|func|import|init|let|protocol|static|struct|subscript|typealias|var)\\b"
                }, 
                {
                    "comment": "statement keyword", 
                    "name": "keyword.statement.swift", 
                    "match": "\\b(break|case|continue|default|do|else|fallthrough|if|in|for|return|switch|where|while)\\b"
                }, 
                {
                    "comment": "expression and type keyword", 
                    "name": "keyword.other.statement.swift", 
                    "match": "\\b(as|dynamicType|is|new|super|self|Self|Type)\\b"
                }, 
                {
                    "comment": "other keyword", 
                    "name": "keyword.other.swift", 
                    "match": "\\b(associativity|didSet|get|infix|inout|left|mutating|none|nonmutating|operator|override|postfix|precedence|prefix|right|set|unowned((un)?safe)?|weak|willSet)\\b"
                }
            ]
        }, 
        "special-literal": {
            "name": "keyword.other.literal.swift", 
            "match": "\\b__(FILE|LINE|COLUMN|FUNCTION)__\\b"
        }, 
        "if-statement-keyword": {
            "comment": "if-statement", 
            "name": "keyword.control.if.swift", 
            "match": "\\b(if|else)\\b"
        }, 
        "logical-operator": {
            "name": "keyword.operator.logical.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)(!|&&|\\|\\|)(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "import-declaration": {
            "comment": "import-declaration", 
            "name": "meta.import.swift", 
            "match": "\\b(import)\\s+(?:(typealias|struct|class|enum|protocol|var|func)\\s+)?(\\w+)", 
            "captures": {
                "1": {
                    "name": "keyword.other.import.swift"
                }, 
                "2": {
                    "name": "storage.modifier.swift"
                }, 
                "3": {
                    "name": "support.type.module.import.swift"
                }
            }
        }, 
        "remainder-operator": {
            "name": "keyword.operator.remainder.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)\\%(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "type-casting-operator": {
            "name": "keyword.operator.type-casting.swift", 
            "match": "\\b(is\\b|as(\\?\\B|\\b))"
        }, 
        "comment": {
            "comment": "All comment types", 
            "patterns": [
                {
                    "include": "#documentation-comment"
                }, 
                {
                    "include": "#block-comment"
                }, 
                {
                    "include": "#in-line-comment"
                }
            ]
        }, 
        "dictionary-type": {
            "end": "(>)", 
            "begin": "\\b(Dictionary)(<)", 
            "beginCaptures": {
                "1": {
                    "name": "support.type.dictionary.swift"
                }, 
                "2": {
                    "name": "punctuation.dictionary.begin.swift"
                }
            }, 
            "name": "meta.dictionary.swift", 
            "endCaptures": {
                "1": {
                    "name": "punctuation.dictionary.end.swift"
                }
            }, 
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        }, 
        "range-operator": {
            "name": "keyword.operator.range.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)\\.\\.(?:\\.)?(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }, 
        "block-comment": {
            "comment": "Block comment", 
            "begin": "/\\*", 
            "end": "\\*/", 
            "name": "comment.block.swift", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.end.swift"
                }
            }, 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.block.begin.swift"
                }
            }
        }, 
        "optional-type": {
            "end": "(>)", 
            "beginCaptures": {
                "1": {
                    "name": "support.type.optional.swift"
                }, 
                "2": {
                    "name": "punctuation.optional.begin.swift"
                }
            }, 
            "name": "meta.optional.swift", 
            "match": "\\b(Optional)(<)", 
            "endCaptures": {
                "1": {
                    "name": "punctuation.optional.end.swift"
                }
            }, 
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        }, 
        "in-line-comment": {
            "comment": "In-line comment", 
            "name": "comment.line.double-slash.swift", 
            "match": "(//).*", 
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.line.double-slash.swift"
                }
            }
        }, 
        "comparative-operator": {
            "name": "keyword.operator.comparative.swift", 
            "match": "(?<!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)((=|!)==?|(<|>)=?|~=)(?!\\/|=|\\-|\\+|!|\\*|%|<|>|&|\\||\\^|~|\\.)"
        }
    }, 
    "scopeName": "source.swift", 
    "keyEquivalent": "^~S", 
    "patterns": [
        {
            "include": "#comment"
        }, 
        {
            "include": "#literal"
        }, 
        {
            "include": "#operator"
        }, 
        {
            "include": "#import-declaration"
        }, 
        {
            "include": "#storage-type"
        }, 
        {
            "include": "#keyword"
        }, 
        {
            "include": "#primitive-type"
        }, 
        {
            "include": "#collection-type"
        }, 
        {
            "include": "#optional-type"
        }, 
        {
            "include": "#protocol-composition-type"
        }, 
        {
            "include": "#boolean"
        }
    ], 
    "uuid": "7efa1168-97c3-4433-8dd7-15b99bf3bb53", 
    "author": "Matt Alexander - matt@queg.net", 
    "name": "Swift", 
    "fileTypes": [
        "swift"
    ]
}